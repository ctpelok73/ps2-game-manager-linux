import customtkinter as ctk
from customtkinter import filedialog, CTkImage
import threading
from PIL import Image, UnidentifiedImageError
from pathlib import Path
from concurrent.futures import ThreadPoolExecutor
from game_identifier import identify_games
from image_utils import download_cover
import logging

logger = logging.getLogger(__name__)

ctk.set_appearance_mode("Dark")
ctk.set_default_color_theme("green")

class PS2GameManager(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("PlayStation 2 Game Manager")
        self.geometry("1200x800")
        self._create_widgets()
        self._setup_data()
        self.center_window()
        self._setup_log_colors()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self._image_references = {}
        self._current_image = None
        self._image_lock = threading.Lock()
        self._scan_active = False
        self._current_scan_index = 0
        self._games_to_process = []
        self._cancel_operation = False  # –ù–æ–≤—ã–π —Ñ–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π

    def _create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.main_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.main_frame.pack(padx=10, pady=10, fill="both", expand=True)

        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.toolbar = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.toolbar.pack(fill="x", pady=5)
        self._create_toolbar_buttons()

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress = ctk.CTkProgressBar(self.main_frame)
        self.progress.pack(fill="x", pady=5)
        self.progress.set(0)

        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        self.content = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.content.pack(fill="both", expand=True)

        # –°–æ–∑–¥–∞–µ–º scrollable frame –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
        self.game_list = ctk.CTkScrollableFrame(self.content, width=450)
        self.game_list.pack(side="left", fill="both", expand=True, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ–±–ª–æ–∂–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        self.cover_frame = ctk.CTkFrame(self.content, width=300, height=300)
        self.cover_frame.pack(side="right", padx=10)
        self.cover_frame.pack_propagate(False)  # –ó–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ—Ä–µ–π–º–∞
        
        # –°–æ–∑–¥–∞–µ–º label –¥–ª—è –æ–±–ª–æ–∂–∫–∏ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
        self.cover_label = ctk.CTkLabel(
            self.cover_frame, 
            text="–ù–µ—Ç –æ–±–ª–æ–∂–∫–∏",
            width=300,
            height=300
        )
        self.cover_label.pack(expand=True, fill="both")

        # –ü–∞–Ω–µ–ª—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
        self.rename_panel = ctk.CTkFrame(self.main_frame, fg_color="transparent")
        self.rename_panel.pack(fill="x", pady=10)
        self._create_rename_widgets()

        # –õ–æ–≥ –∏ —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        self.log = ctk.CTkTextbox(self.main_frame, height=150)
        self.log.pack(fill="both", expand=True)
        self.status_bar = ctk.CTkLabel(self, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ...", anchor="w")
        self.status_bar.pack(fill="x", padx=5)

    def _setup_data(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö"""
        self.games = {
            'paths': [],
            'serials': [],
            'titles': [],
            'buttons': []
        }
        self.current_folder = None
        self.art_folder = None

    def _setup_log_colors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –ª–æ–≥–∞"""
        self.log.tag_config("error", foreground="#FF4444")
        self.log.tag_config("warning", foreground="#FFB443")
        self.log.tag_config("success", foreground="#44FF44")
        self.log.tag_config("info", foreground="#FFFFFF")

    def _create_toolbar_buttons(self):
        self.scan_button = ctk.CTkButton(
            self.toolbar,
            text="üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å",
            command=self.start_scan,
            font=("Arial", 14),
            corner_radius=8,
            width=200
        )
        self.scan_button.pack(side="left", padx=5)

        self.refresh_button = ctk.CTkButton(
            self.toolbar,
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫",
            command=self.refresh_games_list,
            font=("Arial", 14),
            corner_radius=8,
            width=200,
            state="disabled"  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞
        )
        self.refresh_button.pack(side="left", padx=5)

        self.folder_button = ctk.CTkButton(
            self.toolbar,
            text="üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É",
            command=self.select_folder,
            font=("Arial", 14),
            corner_radius=8,
            width=200
        )
        self.folder_button.pack(side="left", padx=5)

        self.covers_button = ctk.CTkButton(
            self.toolbar,
            text="üñº –°–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫–∏",
            command=self.download_all_covers,
            font=("Arial", 14),
            corner_radius=8,
            width=200
        )
        self.covers_button.pack(side="left", padx=5)

        self.clear_log_button = ctk.CTkButton(
            self.toolbar,
            text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥",
            command=self.clear_log,
            font=("Arial", 14),
            corner_radius=8,
            width=200
        )
        self.clear_log_button.pack(side="left", padx=5)

    def _create_rename_widgets(self):
        self.rename_entry = ctk.CTkEntry(
            self.rename_panel,
            placeholder_text="–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞",
            width=400
        )
        self.rename_entry.pack(side="left", expand=True, padx=5)

        ctk.CTkButton(
            self.rename_panel,
            text="üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
            command=self.suggest_name,
            font=("Arial", 12)
        ).pack(side="left", padx=5)

        ctk.CTkButton(
            self.rename_panel,
            text="üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å",
            command=self.rename_file,
            font=("Arial", 12)
        ).pack(side="left")

    def center_window(self):
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f"{width}x{height}+{x}+{y}")

    def clear_log(self):
        self.log.delete("1.0", "end")
        self.log_message("–õ–æ–≥ –æ—á–∏—â–µ–Ω", "info")

    def log_message(self, message, tag="info"):
        self.log.insert("end", f"{message}\n", tag)
        self.log.see("end")
        self.update_status(f"–°—Ç–∞—Ç—É—Å: {message}")

    def update_status(self, message):
        self.status_bar.configure(text=message)
        self.update_idletasks()

    def select_folder(self):
        try:
            path = filedialog.askdirectory()
            if path:
                self.current_folder = Path(path)
                self.art_folder = self.current_folder / "ART"
                
                if not self.art_folder.exists():
                    self.art_folder.mkdir(parents=True)
                    self.log_message(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –æ–±–ª–æ–∂–µ–∫: {self.art_folder}", "success")
                
                self.log_message(f"–í—ã–±—Ä–∞–Ω–∞ —Ä–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {path}", "info")
            else:
                self.log_message("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞", "warning")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞: {str(e)}", "error")

    def start_scan(self):
        if not self.current_folder:
            self.log_message("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É!", "warning")
            return
        if self._scan_active:
            self.log_message("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", "warning")
            return

        self._cancel_operation = False
        threading.Thread(target=self._initial_scan, daemon=True).start()

    def _initial_scan(self):
        """–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏"""
        try:
            self._scan_active = True
            self.scan_button.configure(state="disabled")
            self.refresh_button.configure(state="disabled")
            self.log_message("–ù–∞—á–∞—Ç–æ –ø–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...", "info")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self.scan_folder()
            
            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.scan_button.configure(state="disabled")
            self.refresh_button.configure(state="normal")
            self.log_message("–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞.", "success")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–∏—á–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "error")
            self.scan_button.configure(state="normal")
            self.refresh_button.configure(state="disabled")
        finally:
            self._scan_active = False

    def scan_folder(self):
        try:
            self._scan_active = True
            self.log_message("–ù–∞—á–∞—Ç–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ...", "info")
            self.progress.set(0)

            # –û—á–∏—â–∞–µ–º –æ–±–ª–æ–∂–∫—É
            try:
                self._current_image = None
                self.cover_label._image = None
                self.cover_label.configure(image=None, text="")
                self.update_idletasks()
                self._image_references.clear()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –æ–±–ª–æ–∂–∫–∏: {str(e)}")

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–Ω–æ–ø–æ–∫
            try:
                if hasattr(self, 'game_list') and self.game_list is not None:
                    for btn in self.games['buttons']:
                        try:
                            if hasattr(btn, 'destroy'):
                                btn.destroy()
                        except Exception:
                            pass
                    self.games['buttons'].clear()
                    
                    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º scrollable frame
                    if self.game_list.winfo_exists():
                        self.game_list.pack_forget()
                        self.game_list.destroy()
                    
                    self.game_list = ctk.CTkScrollableFrame(self.content, width=450)
                    self.game_list.pack(side="left", fill="both", expand=True, padx=5, before=self.cover_frame)
                    
                    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    self.games = {
                        'paths': [],
                        'serials': [],
                        'titles': [],
                        'buttons': []
                    }
                    
                    self.update()
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {str(e)}")

            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä
                games = identify_games(
                    str(self.current_folder),
                    self.log_message,
                    progress_callback=self._update_scan_progress
                )
            except Exception as e:
                raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä: {str(e)}")
            
            if self._cancel_operation:
                self.log_message("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "warning")
                self._scan_active = False
                return

            try:
                games.sort(key=lambda x: x[2].lower())
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏–≥—Ä: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            
            self._games_to_process = games
            self._current_scan_index = 0
            self._total_games = len(games)
            
            # –ó–∞–ø—É—Å–∫ –ø–æ—à–∞–≥–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.after(10, self._process_next_game)

        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", "error")
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            self._scan_active = False

    def _update_scan_progress(self, current, total):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–≥—Ä"""
        self.progress.set(current / total)
        self.update_status(f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: {current}/{total}")

    def _process_next_game(self):
        """–ü–æ—à–∞–≥–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏–≥—Ä"""
        if self._current_scan_index >= self._total_games:
            self._scan_active = False
            self.progress.set(0)
            self.log_message(f"–ù–∞–π–¥–µ–Ω–æ {self._total_games} –∏–≥—Ä", "success")
            self.update_status("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            return

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ game_list
            if not hasattr(self, 'game_list') or self.game_list is None:
                self._scan_active = False
                self.log_message("–û—à–∏–±–∫–∞: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", "error")
                return

            path, serial, title = self._games_to_process[self._current_scan_index]
            
            self.games['paths'].append(path)
            self.games['serials'].append(serial)
            self.games['titles'].append(title)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            try:
                btn = ctk.CTkButton(
                    master=self.game_list,
                    text=f"üéÆ {Path(path).name}\nüî¢ {serial} | üìõ {title}",
                    command=lambda i=self._current_scan_index: self.select_game(i),
                    anchor="w",
                    font=("Arial", 12),
                    height=60,
                    fg_color="transparent",
                    hover_color="#2A2D2E",
                    corner_radius=8
                )
                btn.pack(fill="x", pady=2)
                self.games['buttons'].append(btn)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–∫–∏: {str(e)}")
            
            self.progress.set((self._current_scan_index + 1) / self._total_games)
            self.update_status(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {self._current_scan_index + 1}/{self._total_games} –∏–≥—Ä")
            
            self._current_scan_index += 1
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if hasattr(self, 'game_list') and self.game_list is not None:
                self.after(10, self._process_next_game)
            else:
                self._scan_active = False
                self.log_message("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: —Å–ø–∏—Å–æ–∫ –∏–≥—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "warning")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä—ã: {str(e)}")
            self._current_scan_index += 1
            if hasattr(self, 'game_list') and self.game_list is not None:
                self.after(10, self._process_next_game)

    def select_game(self, index):
        """–í—ã–±–æ—Ä –∏–≥—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞"""
        if not isinstance(index, int) or index < 0 or index >= len(self.games['buttons']):
            self.log_message("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å –∏–≥—Ä—ã", "error")
            return

        for btn in self.games['buttons']:
            btn.configure(fg_color="transparent")
        
        self.games['buttons'][index].configure(
            fg_color="#1F6AA5",
            border_width=1,
            border_color="#144870"
        )
        self.show_game_details(index)

    def show_game_details(self, index):
        self.rename_entry.delete(0, "end")
        path = self.games['paths'][index]
        self.rename_entry.insert(0, Path(path).stem)
        
        serial = self.games['serials'][index]
        self.load_cover(serial)

    def load_cover(self, serial):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏ –∏–≥—Ä—ã"""
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self._current_image = None
            self.cover_label._image = None
            self.cover_label.configure(image=None, text="")
            self.update_idletasks()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            cover = f"{serial.replace('-', '_')[:-2]}.{serial[-2:]}_COV.png"
            cover_path = self.art_folder / cover
            
            if cover_path.exists():
                self.display_cover(cover_path)
            else:
                # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±–ª–æ–∂–∫–∏
                self.cover_label.configure(text="–ù–µ—Ç –æ–±–ª–æ–∂–∫–∏")
                self.update_idletasks()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {str(e)}")
            self._handle_image_error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")

    def display_cover(self, path):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏"""
        try:
            if not Path(path).exists():
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
            key = str(path)
            if key in self._image_references:
                self.after(0, lambda: self._update_cover(self._image_references[key]))
                return

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            threading.Thread(
                target=self._async_load_image,
                args=(path,),
                daemon=True
            ).start()

        except Exception as e:
            self._handle_image_error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")

    def _async_load_image(self, path):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
            if not Path(path).exists():
                raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")

            with self._image_lock:
                try:
                    with Image.open(path) as image:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        if image.size[0] * image.size[1] > 10000000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Ä–∞–∑–º–µ—Ä
                            raise ValueError("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ")
                            
                        image = image.resize((300, 300), Image.LANCZOS)
                        ctk_image = CTkImage(image, size=(300, 300))
                except UnidentifiedImageError:
                    raise UnidentifiedImageError("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                except Exception as e:
                    raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫—ç—à–µ
            key = str(path)
            self._image_references[key] = ctk_image

            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ GUI
            try:
                self.after(0, lambda: self._update_cover(ctk_image))
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ GUI: {str(e)}")

        except FileNotFoundError as e:
            self._handle_image_error(str(e))
        except UnidentifiedImageError:
            self._handle_image_error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        except ValueError as e:
            self._handle_image_error(str(e))
        except Exception as e:
            self._handle_image_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
            logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

    def _update_cover(self, ctk_image):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –≤ GUI"""
        try:
            if not self.winfo_exists():  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –µ—â–µ –æ–∫–Ω–æ
                return
            
            self._current_image = ctk_image  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–µ–∫—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.cover_label.configure(image=ctk_image, text="")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏: {str(e)}")
            self._handle_image_error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

    def _handle_image_error(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        logger.error(message)
        self.log_message(message, "error")
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            self._current_image = None
            self.cover_label._image = None
            self.cover_label.configure(image=None, text="–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏")
            self.update_idletasks()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—à–∏–±–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

    def suggest_name(self):
        if (index := self.get_selected_index()) is not None:
            self.rename_entry.delete(0, "end")
            self.rename_entry.insert(0, self.games['titles'][index])

    def rename_file(self):
        if (index := self.get_selected_index()) is None:
            self.log_message("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É!", "warning")
            return
        
        old_path = Path(self.games['paths'][index])
        new_name = self.rename_entry.get().strip()
        
        if not new_name:
            self.log_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è!", "warning")
            return
        
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        new_name = new_name.replace(':', '-').replace('?', '')\
            .replace('/', '-').replace('\\', '-')\
            .replace('*', '').replace('"', '')\
            .replace('<', '').replace('>', '')\
            .replace('|', '')
        
        new_path = old_path.parent / f"{new_name}.iso"
        
        try:
            if new_path.exists():
                raise FileExistsError("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                
            old_path.rename(new_path)
            self.games['paths'][index] = str(new_path)
            self.update_game_list(index, new_name)
            self.log_message(f"–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ –≤ {new_name}.iso", "success")
        except PermissionError:
            self.log_message("–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", "error")
        except FileExistsError:
            self.log_message("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", "error")
        except OSError as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã: {str(e)}", "error")
        except Exception as e:
            self.log_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", "error")

    def get_selected_index(self):
        for i, btn in enumerate(self.games['buttons']):
            if btn.cget("fg_color") == "#1F6AA5":
                return i
        return None

    def update_game_list(self, index, new_name):
        btn = self.games['buttons'][index]
        new_text = f"üéÆ {new_name}.iso\nüî¢ {self.games['serials'][index]} | üìõ {self.games['titles'][index]}"
        btn.configure(text=new_text)

    def download_all_covers(self):
        if not self.games['serials']:
            self.log_message("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!", "warning")
            return

        self._cancel_operation = False  # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—Ç–º–µ–Ω—ã
        threading.Thread(target=self._download_all_covers, daemon=True).start()

    def _download_all_covers(self):
        try:
            total = len(self.games['serials'])
            self.progress.set(0)
            
            with ThreadPoolExecutor() as executor:
                futures = []
                for i in range(total):
                    if self._cancel_operation:
                        self.log_message("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞", "warning")
                        break
                    
                    serial = self.games['serials'][i]
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                    cover = f"{serial.replace('-', '_')[:-2]}.{serial[-2:]}_COV.png"
                    cover_path = self.art_folder / cover
                    
                    if not cover_path.exists():
                        futures.append(executor.submit(
                            download_cover,
                            self.games['titles'][i],
                            serial,
                            str(self.art_folder)
                        ))
                    else:
                        self.log_message(f"–û–±–ª–æ–∂–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cover}", "info")
                
                for i, future in enumerate(futures):
                    if self._cancel_operation:
                        break
                    try:
                        result = future.result()
                        if result and result[0]:
                            self.log_message(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –æ–±–ª–æ–∂–∫–∞: {result[1]}", "success")
                        else:
                            self.log_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É –¥–ª—è {self.games['titles'][i]}", "warning")
                    except Exception as e:
                        self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±–ª–æ–∂–∫–∏: {str(e)}", "error")
                    self.progress.set((i + 1) / len(futures))
                    self.update_status(f"–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫: {i + 1}/{len(futures)}")
                
                if not self._cancel_operation:
                    self.log_message("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", "success")
        
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫: {str(e)}", "error")
        finally:
            self.progress.set(0)

    def refresh_games_list(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä"""
        if not self.current_folder:
            self.log_message("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞!", "warning")
            return
        
        if self._scan_active:
            self.log_message("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è!", "warning")
            return

        self._cancel_operation = False
        threading.Thread(target=self._refresh_scan, daemon=True).start()

    def _refresh_scan(self):
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        try:
            self._scan_active = True
            self.refresh_button.configure(state="disabled")
            self.log_message("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π...", "info")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            current_files = set(self.games['paths'])
            
            # –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–ø–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            new_games = identify_games(
                str(self.current_folder),
                self.log_message,
                progress_callback=self._update_scan_progress
            )
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –Ω–æ–≤—ã—Ö –ø—É—Ç–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            new_paths = {path for path, _, _ in new_games}
            
            # –ù–∞—Ö–æ–¥–∏–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            removed_files = current_files - new_paths
            if removed_files:
                self.log_message(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(removed_files)} —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤", "info")
                self._remove_missing_games(removed_files)
            
            # –ù–∞—Ö–æ–¥–∏–º –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã
            new_files = [(p, s, t) for p, s, t in new_games if p not in current_files]
            
            if new_files:
                self.log_message(f"–ù–∞–π–¥–µ–Ω–æ {len(new_files)} –Ω–æ–≤—ã—Ö –∏–≥—Ä", "success")
                self._add_new_games(new_files)
            elif not removed_files:
                self.log_message("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ", "info")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {str(e)}", "error")
        finally:
            self._scan_active = False
            self.refresh_button.configure(state="normal")

    def _remove_missing_games(self, removed_files):
        """–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∏–≥—Ä –∏–∑ —Å–ø–∏—Å–∫–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
            indices_to_remove = []
            for i, path in enumerate(self.games['paths']):
                if path in removed_files:
                    indices_to_remove.append(i)
            
            # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞
            for index in reversed(indices_to_remove):
                # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                if index < len(self.games['buttons']):
                    try:
                        if self.games['buttons'][index].winfo_exists():
                            self.games['buttons'][index].destroy()
                    except Exception:
                        pass
                
                # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
                for key in ['paths', 'serials', 'titles', 'buttons']:
                    if index < len(self.games[key]):
                        self.games[key].pop(index)
                
                self.log_message(f"–£–¥–∞–ª–µ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∞—è –∏–≥—Ä–∞: {Path(self.games['paths'][index]).name}", "info")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–≥—Ä: {str(e)}", "error")

    def _add_new_games(self, new_files):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∏–≥—Ä –≤ —Å–ø–∏—Å–æ–∫"""
        try:
            for path, serial, title in new_files:
                self.games['paths'].append(path)
                self.games['serials'].append(serial)
                self.games['titles'].append(title)
                
                btn = ctk.CTkButton(
                    master=self.game_list,
                    text=f"üéÆ {Path(path).name}\nüî¢ {serial} | üìõ {title}",
                    command=lambda i=len(self.games['buttons']): self.select_game(i),
                    anchor="w",
                    font=("Arial", 12),
                    height=60,
                    fg_color="#1F6AA5",  # –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–µ –∏–≥—Ä—ã —Ü–≤–µ—Ç–æ–º
                    hover_color="#2A2D2E",
                    corner_radius=8
                )
                btn.pack(fill="x", pady=2)
                self.games['buttons'].append(btn)
                
                self.log_message(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è –∏–≥—Ä–∞: {title}", "success")
        
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–≥—Ä: {str(e)}", "error")

if __name__ == "__main__":
    app = PS2GameManager()
    app.mainloop()